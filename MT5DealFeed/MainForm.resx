<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Ov/PkTL/zpAu/9SbUP/QlDr/0ZY//82PKf/QlDj/05lJ/tWeU5rcsGUFAAAAAPv47wDWn0Z/1Z5Fm9q/
        vgHyx0x28sZIjvbqxALy28QV9eLMAd2ybwfSmUOszY0m/8+RMf/QlDj/z5I1/9CUO//NjSX/z5Ex/9CU
        Of/Pkzf/0JQ7/82NJf/PkjP/0JQ6/9CTOf/Pkzf/zIwj/9CUOf/PkjP/0ZU95tahUCwAAAAA3rNuCtWe
        Ra7XoUxM+NhqDfLGRrnyx0xE9tyWD/XYlib//fkA051CKM6QLOXNjib/zo8s/8yMI//MjCH/zY4n/82N
        Jf/Ojyz/zIwj/8yMIf/Njif/zY0k/86PK//NjST/zIwh/82OJv/NjST/zo8r/8yNJP/MjSL+0JUzbPnv
        9ADYpFEj1Z5Fs9ajWRnzylI48sVFxfPLVxf213sv99d7Kv/+/QDRljVO0ZY/+tKXRf/RlT//z5I2/8yN
        I//RlkD/0ZU+/9GWQP/Pkjb/zIwg/9GVPP/RlT//0ZU//9CUO//MjCH/0ZU8/9GVP//RlT//0JQ7/8yM
        If/PkzGU+/T8AdqnWD7Wn0ieyZh+A/LITWbyxUS19tmGBPbTbkv2024iAAAAANKZOmrSl0P/05pM/86Q
        Lv/Rlj7/zI0j/9KYRf/SmEX/zpAu/9GWPv/MjCD/0ZY+/9OZSP/OkC7/0ZdC/8yNI//Rlj7/05lI/86Q
        Lv/Rl0L/zI0j/8+TNKft09UE1p9HT9eiTIjlxp4A8sVEhfLHSqH+//8A9M1bWvTMVx4AAAAA05tFddOZ
        Sf/Sl0P/0ZU//8+SNf/Ojyv/0plH/9CVPf/RlUD/z5I1/82NJv/SmEf/0ZU+/9GVQP/QlDv/zY4n/9KY
        R//RlT7/0ZVA/9CUO//NjSb/0phErenKtgbUmj1U1Js/eQAAAADyxkeQ8sZHkPz25AD10GRo9dJqJwAA
        AADTmz9hzpAr/s2NJv/Ojyv/zIwi/8yNI//Njyn/zY0k/86PK//MjCL/zIwi/82PKv/NjST/zo8r/8yN
        JP/MjCH/zY8q/82NJP/Ojyv/zI0k/8yMIf/PkjCs3K9sBNikUkfVnURxg1P/APLGSJDyx0qW7sNqAPXO
        Xm/10GU++uSkANObQz7PkjTzzIwj/8yNI/vNjyryzpAv/8+SM/7MjCP/zY0k/s6QLfzOkDD/z5Ey/8yM
        Iv/NjST/zpAv/8+SM//OkC//zIwh/82PKP/Ojyz/z5Ez/9KYP4j269UB2adXMdijUHDUmDUA8sVEhfLG
        SKr/5z0A9dBkZvXPY2j103AA1qJPGNOZR9TPkTH/zY4n9NGWP97RlkH/0JU8+86RMPzNjyn70pdD79GV
        P/zRlT7/zpAv/86PKv/Tmk380ZU9/NGWQP/Njif/z5I0/9KYRv/RlT750ppCUPft3ADaqVsZ2KRScrd7
        awLyyE1k8sVEv/XWfgf10GVD9c5fnffZgAbbsEwC1Z9Sic+SNP7Njij00pdC3tGVP//Qkzb/z5I0/86P
        KvrSmEfv0ZU9/NCTOP/PkjP/zo8r/dSbUPbPkzb60ZU+/82PKv/Pkzb/05lJ/9KYQdHTnT0ZAAAAAN6z
        bQbZpVNm1qRfEfPKUjfyxUTQ88pUIfbVdRb1zl619dFnL+zGagDYpV4qzpAr38+RMfXQlDnp0JQ6/9GV
        P//Njij/z5I0/9GWPv/QlDv/0ZU//82OJ//Pkzb/0ZZB/tCVPf/QlDv/zI0k/9GVPf/QlTv71Z5Qbty0
        UAEAAAAAwGgAANqpW0Tbql0t99VnDfLFRb7yx0tVAAAAAPXPYYT1zl+L+eCZAt+4ZQHQlTNtzY8o9syM
        I//MjCL/zY4m/8yMIv/Njij/zI0j/8yMIv/Njib/zIwi/82OKP/MjST/zI0j/82NJf/MjCL/zY4o/8+T
        L6/Wo0wR1aQ/AAAAAADz5c4A3rFrGN6zbT7//wAA8sdLd/LGR6D11HUE9tNuKfXOXcT10GU88stfANyw
        awnVn1WJz5Iz+MyMIv/RlT3/0JQ7/9GWQf/PkTL/zIwg/9CUOf/QlDr/0ZZA/9CTOP/MjCD/0JQ5/9CU
        O//TmUjF1qJTJtKZOgAAAAAAAAAAAAAAAADkwYgC5cOLI+fOtATzy1gh8sZHvfPJUzZoAAAA9dBkb/XO
        Xrn2028b68JhAOG6kAvSmUB5zY8o7dKYRf/Sl0X/zpEv/9GWPv/MjCD/0ZY+/9OZSP/OkC//0ZZC/8yM
        Iv/Rlj/61J1OrNekWyfQkzkA////AAAAAAAAAAAAAAAAAOC3dgD58OMC8N7CAf///wDyx01m8sZInvTN
        YAr32H4M9c9goPXOXqn21HMX7cVnAN62ZgPTm0BF05tKrdKYRfHQlT3/0JM4/82NJf/SmEb/0ZZB/9CV
        PP/RlkH6zpAq0NOcRmvcrm8Q1JxKAN20YQAAAAAAAAAAAAAAAAAAAAAAAAAAAPHfwQDw3sQA9tJtAPTR
        agvyx0uU8sdLbPnnswH21nca9c5fs/XOXa310Wgj8cZTANSaNADarGEK1qNXQdWfU37QlDKqzY8ov9CV
        OsLPkzO21J1OktSeTFjWokwaxXsLANqraAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA881dAPTNXxryyE2b88lTVeM+AAD21XQa9c5doPTNW8b10GRR99uICO/GWQDdq1YAzYs8AOPA
        gATUnkIJ1aJDC9aiRgajIQAA0phBAOG0XgDw0Z4A7c+sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA8sZHAPPMXB3zyVGL88pTXPTQZwX32YAK9c9iaPXOXMT1zl2k9dBjTPbT
        cBX///8B8shRAPDGVADwxlYA8chWAPTMWwD32H8E9teCEfLXrhLy28ECAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///8A88pUAPTPZBDzylRl88pWZ/TOYRvyviUA9tNuHvXP
        Ymr1zl6k9c5eqPXPYIv1z2Jq9dFoUfXPYkb10mpI9tJrTvbTb0r21no089acD/HXugEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9M5iAPrtxwH0zV4x9M9mVvbY
        gCfsmwAA88ZEAPfahgn10Wkn9c9iS/XQZWP1021q9dFpXvXQZEf203Aq9tV0Dv///wDy1Z0A8NW2AAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/8AAA/8AAAD+AD+YfAH//DwA+A44AMADEAGAAIAHAABADg
        AAQAwAADgMAAAYAAAAEAgAABAIAAAACAAAAkgAAAJIAAACSAAAAkgAABAAAAAQBAAAGCAAADkCAAB4EQ
        AA/ICAAf+AYAf/xBw//+AD4f/wgAH/+GAP8=
</value>
  </data>
</root>